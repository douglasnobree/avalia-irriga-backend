generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                    String    @id
  accountId             String    @db.Text
  providerId            String    @db.Text
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?   @db.Text
  refreshToken          String?   @db.Text
  idToken               String?   @db.Text
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?   @db.Text
  password              String?   @db.Text
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Propriedade {
  id               String             @id @unique @default(uuid())
  nome             String
  proprietario     String
  telefone         String
  email            String
  municipio        String
  estado           String
  latitude         Float
  longitude        Float
  area_total       Float
  area_irrigada    Float
  observacoes      String?
  userId           String
  organizationId   String
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization     Organization       @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  Unidade_avaliada Unidade_avaliada[]
}

model Unidade_avaliada {
  id             String      @id @default(uuid())
  indentificacao String
  area_ha        Float
  propriedade_id String
  avaliacoes     Avaliacao[]
  propiedade     Propriedade @relation(fields: [propriedade_id], references: [id], onDelete: Cascade)
}

model Avaliacao {
  id               String             @id @default(uuid())
  data             DateTime           @default(now())
  area_irrigada    Float
  volume_agua      Float
  tempo_irrigacao  Float
  cud              Float
  cuc              Float
  offline_status   Boolean
  avaliador_id     String
  unidade_type     UnitModel
  unidade_id       String
  setor_id         String?
  pivo_id          String?
  pivo             Pivo_Central?      @relation(fields: [pivo_id], references: [id])
  setor            Setor_Hidraulico?  @relation(fields: [setor_id], references: [id])
  unidade          Unidade_avaliada   @relation(fields: [unidade_id], references: [id])
  Comentario       Comentario[]
  Ponto_localizada Ponto_localizada[]
  Ponto_pivo       Ponto_pivo[]
}

model Comentario {
  id           String    @id @default(uuid())
  comentario   String
  avaliacao_id String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  avaliacao    Avaliacao @relation(fields: [avaliacao_id], references: [id], onDelete: Cascade)
  Foto         Foto[]
}

model Foto {
  id            String     @id @default(uuid())
  url           String
  descricao     String
  comentario_id String
  comentario    Comentario @relation(fields: [comentario_id], references: [id], onDelete: Cascade)
}

model Ponto_localizada {
  id           String           @id @default(uuid())
  eixo_x       Float
  eixo_y       Float
  volume_ml    Float
  tempo_seg    Int
  vazao_l_h    Float
  avaliacao_id String
  avaliacao    Avaliacao        @relation(fields: [avaliacao_id], references: [id], onDelete: Cascade)
  setor_id     String
  setor        Setor_Hidraulico @relation(fields: [setor_id], references: [id], onDelete: Cascade)
}

model Setor_Hidraulico {
  id                     String             @id @default(uuid())
  fabricante             String
  modelo                 String
  vazao_nominal          Float
  pressao_trabalho       Float
  pressao_recomendada    Float
  dist_emissores         Float
  dist_laterais          Float
  filtro_tipo            String
  malha_filtro           String
  pressao_entrada        Float
  valvula_tipo           String
  energia_tipo           String
  condicoes_gerais       String
  num_emissores          Int
  freq_manutencao        String
  data_ultima_manutencao DateTime
  emissor_type           EmissorType
  tipo_setor             UnitModel
  userId                 String
  user                   User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  avaliacoes             Avaliacao[]
  pontos_localizada      Ponto_localizada[]
}

model Ponto_pivo {
  id               String       @id @default(uuid())
  sequencia        Int
  distancia        Float
  diametro_coletor Float
  volume_ml        Float
  tempo_seg        Int
  vazao_l_h        Float
  avaliacao_id     String
  avaliacao        Avaliacao    @relation(fields: [avaliacao_id], references: [id], onDelete: Cascade)
  pivo_id          String
  pivo             Pivo_Central @relation(fields: [pivo_id], references: [id], onDelete: Cascade)
}

model Pivo_Central {
  id                     String       @id @default(uuid())
  num_torres             Int
  comprimento            Float
  fabricante             String
  modelo                 String
  emissor_type           EmissorType
  energia_tipo           String
  potencia_motor         Float
  vazao_operacao         Float
  controle_tipo          String
  fertirrigacao          Boolean
  fonte_hidrica          String
  tempo_funcionamento    Float
  velocidade             Float
  bocal_tipo             String
  pressao_bocal          Float
  data_ultima_manutencao DateTime
  freq_manutencao        String
  problemas_observados   String
  data_ultima_avaliacoes DateTime
  avaliacoes             Avaliacao[]
  pontos_pivo            Ponto_pivo[]
}

model User {
  id                  String             @id
  name                String             @db.Text
  email               String
  emailVerified       Boolean            @default(false)
  image               String?            @db.Text
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @default(now()) @updatedAt
  sessions            Session[]
  accounts            Account[]
  Propriedade         Propriedade[]
  setores_hidraulicos Setor_Hidraulico[]

  role String? @db.Text

  banned      Boolean?     @default(false)
  banReason   String?      @db.Text
  banExpires  DateTime?
  members     Member[]
  invitations Invitation[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?  @db.Text
  userAgent String?  @db.Text
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy       String? @db.Text
  activeOrganizationId String? @db.Text

  @@unique([token])
  @@map("session")
}

model Verification {
  id         String   @id
  identifier String   @db.Text
  value      String   @db.Text
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

enum UserRole {
  USER
  ADMIN_FAZENDA
  AVALIADOR
  ADMIN
}

enum UnitType {
  LOCALIZADA
  PIVO
}

enum EmissorType {
  MICROMICROASPERSOR
  GOTEJAMENTO
}

enum UnitModel {
  SETOR_HIDRAULICO
  PIVO_CENTRAL
}

model Organization {
  id           String        @id
  name         String        @db.Text
  slug         String?
  logo         String?       @db.Text
  createdAt    DateTime
  metadata     String?       @db.Text
  members      Member[]
  invitations  Invitation[]
  propriedades Propriedade[]

  @@unique([slug])
  @@map("organization")
}

model Member {
  id             String       @id
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  role           String       @db.Text
  createdAt      DateTime

  @@map("member")
}

model Invitation {
  id             String       @id
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  email          String       @db.Text
  role           String?      @db.Text
  status         String       @db.Text
  expiresAt      DateTime
  inviterId      String
  user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)

  @@map("invitation")
}
